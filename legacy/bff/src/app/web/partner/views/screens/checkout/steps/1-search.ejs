<div class="checkout-box" id="step-search" style="display: none;">
    <div class="col-lg-10">
        <div class="checkout-details">
            <div class="custom-checkout-wrapper">
                <div class="icon">
                    <img src="/public/partner/img/icons/person_search.svg" alt="person" />
                </div>
                <div class="text-wrapper">
                    <div class="checkout-title" id="step-search-title">إضافة طلب جديد</div>
                    <div class="checkout-subtitle" id="step-search-subtitle">اكتب رقم موبايل العميل المسجل على مايلو
                        لإيجاده
                        أولً</div>
                </div>
            </div>
            <form id="search-form" class="border-form" method="GET" action="#">
                <div class="form-group">
                    <label for="phoneInput">رقم موبايل العميل </label>
                    <input type="text" name="phone_number" class="form-control" id="phoneInput"
                        oninput="activateSearchButtonAndClearError()"
                        placeholder="ادخل رقم الموبايل المسجل على مايلو" />

                    <div id="errorMsg" class="error-msg"></div>

                    <button class="primary-green-btn btn disabled" id="searchButton" onclick="searchHandler()"
                        disabled="true" type="submit">
                        <img src="/public/partner/img/icons/search.svg" alt="search" id="search" />
                        <div class="white-loader" id="spinner" hidden="true">
                            <div></div>
                            <div></div>
                            <div></div>
                            <div></div>
                        </div>
                        <span class="btn-text"> بحث</span>
                    </button>
            </form>
        </div>
    </div>
</div>

<script>

    document.getElementById('search-form').addEventListener('submit', async (event) => {
        event.preventDefault();
    })

    const toggleLoading = (state) => {
        const spinnerElement = document.getElementById('spinner');
        const searchElemnt = document.getElementById('searchButton');
        spinnerElement.hidden = state;
        if (!state) {
            searchElemnt.classList.add("disabled");
        } else {
            searchButton.classList.remove("disabled");
        }
    }
    const searchHandler = async () => {
        toggleLoading(false);
        try {
            const phoneNumber = document.getElementById("phoneInput").value;
            const response = await axios.post("/private/partner/checkout/search-consumer", {
                phoneNumber: phoneNumber.trim()
            }, {
                headers: {
                    'Content-Type': 'application/json'
                },
                params: params
            });
            let errorMessage = ""
            if (response.data.status != "ACTIVE") {
                errorMessage = "لا يوجد حساب مسجل. يرجى مراجعة الرقم المدخل و المحاولة مرة أخرى";
                document.getElementById("errorMsg").innerText = errorMessage;
                amplitudeLogEvents("Enter Mobile Number", { name: 'customer_account_status', input: "Not Active" }, { name: 'consumer_id', input: consumerInfo.id });

            } else {
                consumerInfo = response.data;
                console.log(consumerInfo);
                currentStep++;
                adjustStepper();
                amplitudeLogEvents("Enter Mobile Number", { name: 'customer_account_status', input: "Active" }, { name: 'consumer_id', input: consumerInfo.id });
            }
        } catch (error) {
            if (error.response.status === 404) {
                errorMessage = "لا يوجد حساب مسجل. يرجى مراجعة الرقم المدخل و المحاولة مرة أخرى";
                amplitudeLogEvents("Failed Enter Mobile Number", { name: 'consumer_id', input: "Not Found" }, { name: 'message', input: error.message }, { name: "status", input: error.response.status });
            } else {
                console.error(error);
                showErrorAlert("مشكلة بسيطة", "حدث خطأ في النظام");
            }
            document.getElementById("errorMsg").innerText = errorMessage;
        } finally {
            toggleLoading(true);
        }
    }

    const activateSearchButtonAndClearError = () => {
        const searchButton = document.getElementById("searchButton");
        const errorMessageElement = document.getElementById("errorMsg");
        errorMessageElement.innerText = ""
        if (phoneInput.value === "" || phoneInput.value.length < 11) {
            searchButton.classList.add("disabled");
            searchButton.disabled = true;
        } else {
            searchButton.disabled = false;
            searchButton.classList.remove("disabled");
        }
    }

</script>