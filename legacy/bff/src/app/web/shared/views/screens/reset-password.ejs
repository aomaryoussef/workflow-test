<body>
  <div class="login mylo-login">
    <div class="container">
      <div class="center-form row">
        <div class="col-12 col-md-6 col-lg-4">
          <div class="error-message" id="error-message"></div>

          <form id="credentials-form" class="form-box" method="POST" action="#">
            <form class="login-form">
              <input id="csrf-token" name="csrf_token" value="" hidden="true" />
              <input name="method" value="password" hidden="true" />
              <div class="logo-wrapper">
                <img src="/public/shared/img/mylo-logo-ar.svg" alt="Mylo" />
              </div>
              <div class="form-group">
                <label for="exampleInputEmail1">كلمة السر جديدة</label>
                <input id="password" type="password" name="password" class="form-control" id="exampleInputEmail1"
                  aria-describedby="emailHelp" placeholder="كلمة السر جديدة" />
              </div>
              <div class="form-group">
                <label for="exampleInputPassword1"> تأكيد كلمة السر جديدة</label>
                <input id="confirm-password" type="password" name="confirm_password" class="form-control"
                  id="exampleInputPassword1" placeholder=" تأكيد كلمة السر جديدة" />
              </div>
              <div class="rounded-btn">
                <button class="btn btn-primary">إنشاء كلمة المرور</button>
              </div>
              <%- include('./common/copyrights');%>
            </form>
          </form>
        </div>
      </div>
    </div>
  </div>
  <script>
    const completeRecoveryFlow = async () => {
      try {
        const recoveryFlowUrl = "<%= recoveryFlowUrl %>";
        const recoveryCode = "<%= recoveryCode %>";
        const response = await axios.post(
          recoveryFlowUrl,
          {
            method: "code",
            code: recoveryCode,
          },
          {
            withCredentials: true,
            headers: {
              "Content-Type": "application/json",
              Accept: "application/json",
            },
          },
        );
        if (response.data.ui.messages[0].id == 4060005) {
          // Kratos error message id for expired flow
          window.alert("كود منتهي الصلاحية");
          window.location = "/public/partner/forget-password";
        }
      } catch (error) {
        console.error(error);
      }
    };

    const createSettingsFlow = async () => {
      const createSettingsFlowUrl = "<%= createSettingsFlowUrl %>";
      try {
        const response = await axios.get(createSettingsFlowUrl, {
          withCredentials: true,
          headers: {
            "Content-Type": "application/json",
            Accept: "application/json",
          },
        });
        document.getElementById("credentials-form").setAttribute("action", response.data.ui.action);
        document
          .getElementById("csrf-token")
          .setAttribute(
            "value",
            response.data.ui.nodes.find((item) => item.attributes.name === "csrf_token").attributes.value,
          );
        handleFormSubmission(response.data.ui.action);
      } catch (error) {
        console.error(error);
      }
    };

    const handleFormSubmission = (submitUrl) => {
      document.getElementById("credentials-form").addEventListener("submit", async (event) => {
        event.preventDefault();
        try {
          if (validatePassword() === false) {
            return;
          }

          const formData = new FormData(document.getElementById("credentials-form"));
          formData.delete("confirm_password");
          const response = await axios.post(submitUrl, formData, {
            withCredentials: true,
            headers: {
              "Content-Type": "application/json",
              Accept: "application/json",
              "X-Session-Token": getCookie("ory_kratos_session"),
            },
          });
          if (response.status === 200) {
            window.location.href = "<%= redirectUrl %>";
          }
        } catch (error) {
          console.error(error);
        }
      });
    };

    const validatePassword = () => {
      let password = document.getElementById("password").value;
      let confirmPassword = document.getElementById("confirm-password").value;
      // Password validation regular expression
      let passwordPattern = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@#$*_%^&+=!]).{8,}$/;
      if (password === confirmPassword) {
        if (password.match(passwordPattern)) {
          return true;
        } else {
          // Password does not meet the criteria
          document.querySelector(".mylo-login").classList.add("error-form");
          document.querySelector("#error-message").textContent =
            "يجب أن تتكون كلمة السر من 8 أحرف أو أكثر، وتتضمن على الأقل حرفًا صغيرًا واحدًا وحرفًا كبيرًا واحدًا ورقمًا واحدًا وحرفًا خاصًا واحدًا.";
          return false;
        }
      } else {
        // Passwords do not match
        document.querySelector(".mylo-login").classList.add("error-form");
        document.querySelector("#error-message").textContent = "كلمة السر غير متطابقة";
        return false;
      }
    };

    const getCookie = (name) => {
      const value = `; ${document.cookie}`;
      const parts = value.split(`; ${name}=`);
      if (parts.length === 2) return parts.pop().split(";").shift();
    };

    completeRecoveryFlow().then(() => {
      createSettingsFlow();
    });
  </script>
</body>